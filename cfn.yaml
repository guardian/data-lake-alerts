AWSTemplateFormatVersion: 2010-09-09
Description: Query the data lake and alert if thresholds are breached
Parameters:
  Stack:
    Description: Stack name
    Type: String
    Default: ophan-data-lake
  App:
    Description: Application name
    Type: String
    Default: data-lake-alerts
  Stage:
    Description: Stage name
    Type: String
    AllowedValues:
      - CODE
      - PROD
    Default: CODE
  SnsTopicForAlerts:
    Description: SNS Topic used for Anghammarad alerts
    Type: String
  DeployBucket:
    Description: Bucket where RiffRaff uploads artifacts on deploy
    Type: String
    Default: ophan-dist
Conditions:
  IsProduction:
    !Equals [!Ref Stage, PROD]
Resources:
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
        - PolicyName: lambda
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: "*"
        - PolicyName: notify
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - SNS:Publish
              Resource: !Ref SnsTopicForAlerts
        - PolicyName: athenaReadAccess
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - athena:StartQueryExecution
                - athena:GetQueryExecution
                - athena:GetQueryResults
              Resource: "*"
        - PolicyName: mandatoryGlueAccess
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - glue:GetDatabase
                - glue:GetTable
                - glue:GetPartitions
              Resource:
                - !Sub arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog
                - !Sub arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/default
        - PolicyName: cleanGlueAccess
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - glue:GetTable
                - glue:GetPartitions
              Resource:
                - !Sub arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/clean
                - !Sub arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/clean/pageview
        - PolicyName: s3CleanPageViewsAccess
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - s3:Get*
                - s3:List*
              Resource:
              - arn:aws:s3:::ophan-clean-pageview
              - arn:aws:s3:::ophan-clean-pageview/*
        - PolicyName: s3QueryResultsAccess
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - s3:GetObject
                - s3:ListBucketMultipartUploads
                - s3:ListMultipartUploadParts
                - s3:AbortMultipartUpload
                - s3:PutObject
              Resource:
                - arn:aws:s3:::aws-athena-query-results-*/primary/*

  DataLakeAlertsSchedulerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${App}-scheduler-${Stage}
      Code:
        S3Bucket:
          Ref: DeployBucket
        S3Key: !Sub ${Stack}/${Stage}/${App}/${App}.jar
      Environment:
        Variables:
          Stage: !Ref Stage
          Stack: !Ref Stack
          App: !Ref App
      Description: Schedules invocations of the DataLakeAlertsWorkerLambda
      Handler: com.gu.datalakealerts.SchedulerLambda::handler
      MemorySize: 1536
      Role: !GetAtt ExecutionRole.Arn
      Runtime: java8
      Timeout: 60

  DataLakeAlertsWorkerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${App}-worker-${Stage}
      Code:
        S3Bucket:
          Ref: DeployBucket
        S3Key: !Sub ${Stack}/${Stage}/${App}/${App}.jar
      Environment:
        Variables:
          Stage: !Ref Stage
          Stack: !Ref Stack
          App: !Ref App
          SnsTopicForAlerts: !Ref SnsTopicForAlerts
      Description: Query the data lake and alert if thresholds are breached
      Handler: com.gu.datalakealerts.WorkerLambda::handler
      MemorySize: 1536
      Role: !GetAtt ExecutionRole.Arn
      Runtime: java8
      Timeout: 180

  MonitoringSchedulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt DataLakeAlertsWorkerLambda.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt MonitoringSchedule.Arn

  MonitoringSchedule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub data-lake-alerts-monitoring-schedule-${Stage}
      ScheduleExpression: cron(0 12 ? * MON-FRI *)
      State: !If [IsProduction, ENABLED, DISABLED] # Schedules are disabled in CODE. This allows us to safely test rule creation without wasting money running unnecessary queries
      Targets:
        - Arn: !GetAtt DataLakeAlertsWorkerLambda.Arn
          Id: ios-friction-screen-scheduler
          Input: |
            {
              "featureId": "friction_screen",
              "platformId": "ios"
            }
        - Arn: !GetAtt DataLakeAlertsWorkerLambda.Arn
          Id: android-friction-screen-scheduler
          Input: |
            {
              "featureId": "friction_screen",
              "platformId": "android"
            }
        - Arn: !GetAtt DataLakeAlertsWorkerLambda.Arn
          Id: android-olgil-epic-scheduler
          Input: |
            {
              "featureId": "olgil_epic",
              "platformId": "android"
            }
        - Arn: !GetAtt DataLakeAlertsWorkerLambda.Arn
          Id: ios-olgil-epic-scheduler
          Input: |
            {
              "featureId": "olgil_epic",
              "platformId": "ios"
            }
        - Arn: !GetAtt DataLakeAlertsWorkerLambda.Arn
          Id: ios-braze-epic-scheduler
          Input: |
            {
              "featureId": "braze_epic",
              "platformId": "android"
            }

  DataLakeAlertsFailureAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
      - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:jacob-test
      AlarmName: !Sub Data Lake Alerts Monitoring Errors in ${Stage}
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref DataLakeAlertsWorkerLambda
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching
